{"version":3,"sources":["components/Input.js","components/TodoItem.js","Todo.js","reportWebVitals.js","index.js"],"names":["Input","props","useState","text","setText","type","value","onChange","event","target","onClick","console","log","trim","addTodo","done","alert","TodoItem","className","item","Todo","todos","setTodos","todo","oldTodo","noDone","forEach","length","getCount","map","index","i","newTodo","task","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPA4BeA,MAzBf,SAAeC,GACX,MAAsBC,mBAAS,IAA/B,mBAAKC,EAAL,KAAWC,EAAX,KAeA,OACA,gCACI,uBAAOC,KAAK,OAAOC,MAAOH,EAAMI,SAhBtB,SAACC,GACXJ,EAAQI,EAAMC,OAAOH,UAgBrB,wBAAQI,QAbE,WACVC,QAAQC,IAAI,YAAaT,GACN,IAAfA,EAAKU,QAITZ,EAAMa,QAAQ,CAACX,KAAMA,EAAMY,MAAM,IACjCX,EAAQ,KAJJY,MAAM,gBAUV,qB,MCTOC,MAVf,SAAkBhB,GAEd,OACI,qBAAKS,QAAST,EAAMS,QAASQ,UAAWjB,EAAMkB,KAAKJ,KAAO,UAAY,GAAtE,SACMd,EAAMkB,KAAKhB,QCuCViB,MAzCf,WACI,IACA,EAA0BlB,mBADR,IAClB,mBAAOmB,EAAP,KAAcC,EAAd,KAwBA,OACI,sBAAKJ,UAAU,MAAf,UACI,cAAC,EAAD,CAAOJ,QAxBC,SAACS,GACbD,GAAS,SAACE,GAAD,4BAAiBA,GAAjB,CAA0BD,UAwB/B,8BAdS,WACbZ,QAAQC,IAAI,mBACZ,IAAIa,EAAS,EAIb,OAHAJ,EAAMK,SAAQ,SAACP,GACNA,EAAKJ,MAAMU,OAGhB,gCAAMA,EAAN,qBAAgCJ,EAAMM,UAOhCC,KACN,6BAEQP,EAAMQ,KAAI,SAACV,EAAMW,GAAP,OACN,6BAAgB,cAAC,EAAD,CAAUpB,QAAS,kBAzBvC,SAACqB,GACb,IAAIC,EAAUX,EAAMQ,KAAI,SAACI,EAAMH,GAC3B,OAAOA,IAAUC,EAAV,2BAAmBE,GAAnB,IAAyBlB,MAAOkB,EAAKlB,OAASkB,KAEzDX,EAASU,GAqBgDtB,CAAQoB,IAAQX,KAAMA,KAAtDW,YC1BlBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f7b55ec.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nfunction Input(props) {\r\n    let [text, setText] = useState(\"\")\r\n    const doKey = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const onAdd = () => {\r\n        console.log(\"Click add\", text);\r\n        if (text.trim() == \"\"){\r\n            alert(\"empty text!\")\r\n            return;\r\n        }\r\n        props.addTodo({text: text, done: false})\r\n        setText(\"\")\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <input type=\"text\" value={text} onChange={doKey} />\r\n        <button onClick={onAdd}>Add</button>\r\n      </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Input","import React, { useState } from 'react';\r\nimport './TodoItem.css'\r\n\r\nfunction TodoItem(props) {\r\n\r\n    return (\r\n        <div onClick={props.onClick} className={props.item.done ? 'is-done' : ''}>\r\n            { props.item.text }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoItem","import './App.css';\r\nimport Input from './components/Input'\r\nimport TodoItem from './components/TodoItem';\r\nimport React, { useState } from 'react';\r\n\r\nfunction Todo() {\r\n    const startTodo = []\r\n    const [todos, setTodos] = useState(startTodo)\r\n\r\n    const addTodo = (todo) => {\r\n        setTodos((oldTodo) => [...oldTodo, todo])\r\n    }\r\n\r\n    const onClick = (i) => {\r\n        let newTodo = todos.map((task, index) => {\r\n            return index === i ? { ...task, done: !task.done } : task;\r\n        });\r\n        setTodos(newTodo);\r\n    }\r\n\r\n    const getCount = () => {\r\n        console.log(\"called getcount\")\r\n        let noDone = 0\r\n        todos.forEach((item) => {\r\n            if (!item.done) noDone++\r\n        })\r\n        return (\r\n            <div>{noDone} remaining out of {todos.length}</div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Input addTodo={addTodo} />\r\n            <div>{getCount()}</div>\r\n            <ul>\r\n                {\r\n                    todos.map((item, index) => (\r\n                        <li key={index}><TodoItem onClick={() => onClick(index)} item={item} /></li>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Todo from './Todo';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Todo />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}